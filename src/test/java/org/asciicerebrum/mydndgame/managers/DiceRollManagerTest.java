package org.asciicerebrum.mydndgame.managers;

import java.security.SecureRandom;
import org.asciicerebrum.mydndgame.interfaces.entities.IDice;
import org.asciicerebrum.mydndgame.interfaces.entities.IDiceAction;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author species8472
 */
public class DiceRollManagerTest {

    private DiceRollManager drManager;

    private SecureRandom rand;

    private IDiceAction diceAction;

    public DiceRollManagerTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
        this.drManager = new DiceRollManager();
        this.rand = mock(SecureRandom.class);
        this.diceAction = mock(IDiceAction.class);
        this.drManager.setRandom(this.rand);

        IDice diceType = mock(IDice.class);

        when(diceType.getSides()).thenReturn(20);
        when(this.diceAction.getDiceNumber()).thenReturn(2L);
        when(this.diceAction.getDiceType()).thenReturn(diceType);
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of rollDice method, of class DiceRollManager.
     */
    @Test
    public void testRollDice() {
        when(this.rand.nextDouble()).thenReturn(0.5d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(22L), rollResult);
    }

    @Test
    public void testRollDiceMinimum() {
        when(this.rand.nextDouble()).thenReturn(0.0d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(2L), rollResult);
    }

    @Test
    public void testRollDiceMaximum() {
        when(this.rand.nextDouble()).thenReturn(1.0d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        // 42 is ok, because 1.0 is never generated by secureRandom. It is
        // exclusive!
        assertEquals(Long.valueOf(42L), rollResult);
    }

    @Test
    public void testRollDiceMinimum010() {
        when(this.rand.nextDouble()).thenReturn(0.1d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(6L), rollResult);
    }

    @Test
    public void testRollDiceMinimum020() {
        when(this.rand.nextDouble()).thenReturn(0.2d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(10L), rollResult);
    }

    @Test
    public void testRollDiceMinimum005() {
        when(this.rand.nextDouble()).thenReturn(0.05d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(4L), rollResult);
    }

    @Test
    public void testRollDiceMinimum015() {
        when(this.rand.nextDouble()).thenReturn(0.15d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(8L), rollResult);
    }

    @Test
    public void testRollDiceMinimum012() {
        when(this.rand.nextDouble()).thenReturn(0.12d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(6L), rollResult);
    }

    @Test
    public void testRollDiceMinimum002() {
        when(this.rand.nextDouble()).thenReturn(0.02d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(2L), rollResult);
    }

    @Test
    public void testRollDiceMaximum09499() {
        when(this.rand.nextDouble()).thenReturn(0.9499d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(38L), rollResult);
    }

    @Test
    public void testRollDiceMaximum095() {
        when(this.rand.nextDouble()).thenReturn(0.95d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(40L), rollResult);
    }

    @Test
    public void testRollDiceMaximum09501() {
        when(this.rand.nextDouble()).thenReturn(0.9501d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(40L), rollResult);
    }

    @Test
    public void testRollDiceMaximum098() {
        when(this.rand.nextDouble()).thenReturn(0.98d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(40L), rollResult);
    }

    @Test
    public void testRollDiceMaximum0995() {
        when(this.rand.nextDouble()).thenReturn(0.995d);

        Long rollResult = this.drManager.rollDice(this.diceAction);

        assertEquals(Long.valueOf(40L), rollResult);
    }

}
